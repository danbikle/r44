%h1 Lesson 020 [ Rails Scaffold ]

%h2 Standalone

%p This lesson is almost standalone.

%p This lesson should depend little on previous lessons (but depends some).

%p
  In
  %a(href='/lessons/lesson002') Lesson 002
  I asked you to install Ubuntu-16.04-Linux and then make note of the inital Linux account you created during installation.

%p To do this lesson, you should login to the account you created in Lesson 002.

%h2 Enhance Linux

%p I did this lesson and I started by walking through some of the steps I did in Lesson 003.

%p I ran some Bash commands.

%p In previous lessons, I had run the commands below.

%p It is harmless to run them again:

.syntax
  %pre
    =render 'lesson018a'

%h2 ron

%p Next, I issued Bash commands to create a user named: "ron".

.syntax
  %pre
    %code
      sudo useradd -m -s /bin/bash -G sudo ron
      sudo passwd ron

%p I did this because when I start a new lesson or app, I like to keep my software isolated from other efforts in the past.

%p Next, I used ssh to log into the ron account:

.syntax
  %pre
    %code
      ssh ron@localhost
      whoami

%p Then, I enhanced the ron account using files from lesson016:

.syntax
  %pre
    %code /usr/bin/curl -L rails4.us/sue/.bashrc    > ~/.bashrc
    %code /usr/bin/curl -L rails4.us/sue/.emacs     > ~/.emacs
    %code /usr/bin/curl -L rails4.us/sue/.gemrc     > ~/.gemrc
    %code /usr/bin/curl -L rails4.us/sue/.gitconfig > ~/.gitconfig

%h2 Ruby

%p Next, I installed Ruby:

.syntax
  %pre
    %code
      whoami
      cd ~ron
      git clone https://github.com/rbenv/rbenv      .rbenv
      git clone https://github.com/rbenv/ruby-build .rbenv/plugins/ruby-build
      bash
      rbenv install 2.6.0
      rbenv global  2.6.0
      gem install rails -v 5.2.2

%h2 Rails

%p Then, I ran a Bash command to create a new Rails app:

.syntax
  %pre
    =render 'lesson020rnew'

%h2 rails generate scaffold

%p Next, I ran Bash commands to create "scaffolds":

.syntax
  %pre
    %code
      cd ~ron/petz1
      rails generate scaffold Owner name:string phone:string email:string location:string
      rails generate scaffold Pet name:string pettype:string age:integer owner:belongs_to

%h2 Tables: owners, pets

%p The above commands generated scripts which I can use to create two tables.

%p I studied the two scripts:

.syntax
  %pre
    %code
      cd ~ron/petz1
      cat db/migrate/*create_owners.rb
      cat db/migrate/*create_pets.rb

%p Then, I ran the two scripts with one simple Bash command:

.syntax
  %pre
    %code rails db:migrate

%h2 Owner.create()

%p Next, I typed in a simple Bash command:

.syntax
  %pre
    %code rails console

%p The above command serves me a "console" which will accept Ruby commands.

%p Ruby allows me to create things called "objects" which are described by "classes".

%p An object is a container of data which describes a real thing in the world.

%p To demonstrate this, I created an owner-object named: rob_grey:

.syntax
  %pre
    %code rob_grey = Owner.create :name => 'Rob Grey',
    %code :phone => '650-253-0000', 
    %code :email => 'rob@grey100.edu', 
    %code :location => 'Tahoe'

%p After I created the rob_grey object I used a dot to look inside it:

.syntax
  %pre
    %code
      rob_grey.name
      rob_grey.phone
      rob_grey.email

%h2 Pet.create()

%p Then, I created a pet-object named: roger:

.syntax
  %pre
    %code roger = Pet.create :name => 'Roger', :pettype => 'Dog', :age => 6, :owner => rob_grey
    
%h2 Attributes

%p Again, I used a simple command to get the name-attribute of the roger-object:

.syntax
  %pre
    %code roger.name

%p And, I looked at other attributes:

.syntax
  %pre
    %code
      roger.pettype
      roger.age

%h2 Association

%p Next, I used roger to study the rob_grey object:

.syntax
  %pre
    %code
      roger.owner
      roger.owner.name
      roger.owner.phone
      roger.owner.email
      roger.owner.location

%p The syntax above shows that Rails has created a data-connection between roger and rob_grey.

%p This data-connection demonstrates a feature of Rails called: "Model-Association".

%p Model-Association is EXTREMELY useful for building web applications.

%p You see the Association-idea implemented on all major web-apps:

%ul
  %li FB shows you photos associated with a friend
  %li Ebay shows you auctions associated with a person
  %li Delta shows you flights associated with a city
  %li Amazon shows you products associated with your cart

%h1#hw Homework

%ul
  %li Why is a scaffold useful?
  
%hr/

%a(href='/lessons/lesson019') Lesson019
