%h1 Lesson 023 [ Docker Intro. ]

%h2 Computers in a Cloud Computer

%img(src='/lesson023/dockerdiagram.png')

%p I started by creating a free account on oracle cloud:

%p
  %a(href='https://www.google.com/search?q=oracle+cloud+free+trial' target='x')
    https://www.google.com/search?q=oracle+cloud+free+trial
  
%p Oracle Cloud is easier to operate than AWS and Google Cloud:

%p
  %a(href='https://www.google.com/search?q=How+to+create+Linux+instance+on+Oracle+Cloud' target='x')
    https://www.google.com/search?q=How+to+create+Linux+instance+on+Oracle+Cloud

%p Then, I created an ubuntu 18.04 instance on Oracle Cloud.

%p That instance allowed me to login using ssh to an account named "ubuntu".

%hr/
%h2 You know ssh?

%p If you know ssh, you should continue this lesson.

%p If ssh is new to you, then you should learn it and then return to this lesson.

%p Understanding ssh is a fundamental skill for any software-person:

%p
  %a(href='https://www.google.com/search?q=ssh+tutorial' target='x')
    https://www.google.com/search?q=ssh+tutorial

%h2 Install Docker on Ubuntu 18.04

%p Next, after I connected to the ubuntu account with ssh, I issued shell commands:

.syntax
  %pre
    %code
      sudo -s
      apt update
      apt -y upgrade
      apt -y install emacs
      apt -y install docker.io
      apt -y install ifupdown aufs-tools debootstrap docker-doc rinse zfs-fuse
      usermod -G docker ubuntu
      shutdown -r now

%p I waited for the instance to reboot.

%hr/
%h2 ~/ub18a [ docker run with no Dockerfile ]
%p Then I returned to ubuntu account, with ssh, and ran shell commands:

.syntax
  %pre
    %code
      mkdir ~/ub18a
      cd    ~/ub18a
      docker run -it ubuntu:18.04 /bin/bash
      ls -la /
      exit

%p The above commands created my first Docker instance inside my cloud account.
%p I called that instance: "ub18a".

%hr/
%h2 ~/ub18b [ Dockerfile FROM, docker build, docker run ]

%p After the above exercise worked okay I did this next:

.syntax
  %pre
    %code
      mkdir ~/ub18b
      cd    ~/ub18b
      echo FROM ubuntu:18.04 > Dockerfile
      docker build -t ub18b .
      docker run  -it ub18b /bin/bash
      ls -la /
      exit

%p The above commands created another Docker instance inside my cloud account.
%p I called that instance: "ub18b".

%hr/
%h2 ~/ub18c [ Dockerfile RUN ]

%p After the above exercise worked okay I did this next:

.syntax
  %pre
    %code
      mkdir ~/ub18c
      cd    ~/ub18c
      echo FROM ubuntu:18.04  >  Dockerfile
      echo RUN apt update     >> Dockerfile
      echo RUN apt -y upgrade >> Dockerfile
      echo RUN apt -y install emacs >> Dockerfile
      cat Dockerfile
      docker build -t ub18c . 
      docker run  -it ub18c /bin/bash
      which emacs
      ls -la /
      exit

%p The above commands created another Docker instance inside my cloud account.
%p I called that instance: "ub18c".

%hr/
%h2 ~/ub18d [ Dockerfile ADD ]
%p After the above exercise worked okay I did this next:

.syntax
  %pre
    %code
      mkdir ~/ub18d
      cd    ~/ub18d
      echo apt update         >> apt.bash
      echo apt -y upgrade     >> apt.bash
      echo apt -y install git >> apt.bash
      echo FROM ubuntu:18.04           >> Dockerfile
      echo ADD apt.bash /root/apt.bash >> Dockerfile
      echo RUN bash     /root/apt.bash >> Dockerfile
      docker build -t ub18d . 
      docker run  -it ub18d /bin/bash
      which git
      ls -la /
      exit

%p The above commands created another Docker instance inside my cloud account.
%p I called that instance: "ub18d".

%hr/
%h2 ~/ub18e [ Dockerfile CMD ]
%p After the above exercise worked okay I did this next:

.syntax
  %pre
    %code
      mkdir ~/ub18e
      cd    ~/ub18e
      emacs apt.bash

%p I used emacs to place Bash syntax in ~/ub18e/apt.bash:

.syntax
  %pre
    %code #!/bin/bash      
    %code
      apt update
      apt -y upgrade
      apt -y install git 
    
%p I used emacs to place Bash syntax in ~/ub18e/ann.bash:

.syntax
  %pre
    %code #!/bin/bash      
    %code
      useradd -m -s /bin/bash -G sudo ann

%p I used emacs to place Docker syntax in ~/ub18e/Dockerfile:

.syntax
  %pre
    %code
      FROM ubuntu:18.04          
      ADD apt.bash /root/apt.bash
      ADD ann.bash /root/ann.bash
      RUN bash     /root/apt.bash
      RUN bash     /root/ann.bash
      CMD ["/bin/bash"]

%p Then, I issued two shell commands:
.syntax
  %pre
    %code
      docker build -t ub18e . 
      docker run  -it ub18e

%p The above commands created another Docker instance inside my cloud account.
%p I called that instance: "ub18e".

%hr/
%h2 ~/ub18f [ Rails inside Docker ]
%p After the above exercise worked okay I did this next:

%p I asked a question.
%p Q: How to install ruby into the ann account (in the Docker instance)?

%p My general idea here is to first copy scripts and files into /root/ folder inside the Docker instance.

%p Then, after the instance is built, I use a root-shell inside the instance to move files to correct places and also run shell scripts.

%p I think this is a better alternative to running Docker syntax because I am more familiar with Bash syntax than Docker syntax.

%p So, to install Ruby into the ann account, I started on a familiar path:

.syntax
  %pre
    %code
      mkdir ~/ub18f
      cd    ~/ub18f
      emacs apt.bash

%p I typed this into ~/ub18f/apt.bash:

.syntax
  %pre
    %code #!/bin/bash      
    %code
      apt update
      apt -y upgrade
      apt -y install emacs ruby ruby-dev wget curl
      apt -y install git apt autoconf bison build-essential
      apt -y install libssl-dev libyaml-dev libreadline6-dev
      apt -y install zlib1g-dev libncurses5-dev libffi-dev
      apt -y install libgdbm5 libgdbm-dev libsqlite3-dev
      
%p I used emacs to create a file: ~/ub18f/ann_bashrc.
%p I intended ann_bashr to become ~ann/.bashrc inside the Docker instance:

.syntax
  %pre
    %code
      emacs ann_bashrc
      
%p I typed this into ~/ub18f/ann_bashrc:

.syntax
  %pre
    =render 'lesson023bashrc'

%p I used emacs to create a script for root to run inside the Docker instance:

.syntax
  %pre
    %code
      emacs ann.bash

%p I typed this into ~/ub18f/ann.bash:

.syntax
  %pre
    %code #!/bin/bash
    %code
      useradd -m -s /bin/bash -G sudo ann
      cp /root/ann_bashrc ~ann/.bashrc
      cp /root/.gemrc     ~ann/.gemrc
      chown ann           ~ann/.bashrc
      chown ann           ~ann/.gemrc
      su - ann -c 'cd ~ann; git clone https://github.com/rbenv/rbenv      .rbenv'
      su - ann -c 'cd ~ann; git clone https://github.com/rbenv/ruby-build .rbenv/plugins/ruby-build'
      su - ann -c 'cd ~ann; rbenv install 2.6.1'
      su - ann -c 'cd ~ann; rbenv global  2.6.1'
      su - ann -c 'cd ~ann; gem install rails -v 5.2.2'
      
%p Then I created another file intended for the inside of the Docker instance:

.syntax
  %pre
    %code
      cd ~/ub18f
      emacs .gemrc
      
%p I typed this into ~/ub18f/.gemrc:      

.syntax
  %pre
    =render 'lesson023gemrc'

%p Next, I created ~/ub18f/Dockerfile:

.syntax
  %pre
    %code
      cd ~/ub18f
      emacs Dockerfile

%p I typed this into  ~/ub18f/Dockerfile:

.syntax
  %pre
    %code
      FROM ubuntu:18.04          
      ADD apt.bash   /root/apt.bash
      ADD ann.bash   /root/ann.bash
      ADD .gemrc     /root/.gemrc
      ADD ann_bashrc /root/ann_bashrc
      RUN bash       /root/apt.bash
      RUN bash       /root/ann.bash
      USER ann
      CMD ["/bin/bash"]
      
%p Then, I built the Docker instance:

.syntax
  %pre
    %code
      cd ~/ub18f
      docker build -t ub18f . 
      docker run  -it ub18f

%p The above commands created another Docker instance inside my cloud account.
%p I called that instance: "ub18f".

%hr/
%h2 ~/ub18g [ Git + Docker ]
%p The above exercise is problematic due to its many steps.

%p I like to use Git to reduce the number of steps before I call: "docker build".

%p To do this exercise I ran four shell commands:

.syntax
  %pre
    %code
      cd ~
      git clone https://github.com/danbikle/ub18g
      docker build -t ub18g .
      docker run -it  ub18g
%p I like this demo because it shows that I can rely on Git to pack complexity into a git repo.

%p Then I offer students an opportunity to avoid the complexity.

%p If, however, they like complexity, they can study files in the git-repo.

%hr/
%h2#hw Homework

%ul
  %li Create an Ubuntu 18.04 instance on Oracle Cloud.
  %li Inside that instance, create an Ubuntu 18.04 Docker instance.
  %li Build a git repo which has a useful Dockerfile.
  
%a(href='/lessons/lesson022') Lesson022
