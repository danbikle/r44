%h1 Lesson 016 [ Linux useradd ]

%p To do this lesson, you should login to the account you created in lesson002.

%p By creating an account named "sue", this lesson teaches a set of steps I use when I create a new Linux account.

%p I started by logging into Ubuntu, and then I installed some software:

.syntax
  %pre
    %code
      sudo apt update
      sudo apt upgrade
      sudo apt install openssh-server

%p Often the above update and upgrade commands will fail.

%p If so, just run this command:
.syntax
  %pre
    %code sudo apt install openssh-server

%p Be aware that you can apt-install a package more than once and no harm should result.

%p This behavior is useful when you forget that you had already installed a package.

%p Anyway, return your attention back to update-upgrade failure.

%p Usually you can work around update-upgrade failure two ways:

%ul
  %li Wait 30 minutes for Ubuntu to prepare itself for update and upgrade
  %li Or, just ignore the failure (which is acceptable in a training environment)

%p The above software, openssh-server, will allow me to connect to my host with ssh.

%p If you are new to ssh, know that you can use ssh to login to another host from your shell.

%p This is useful if the host is in the cloud and rented to you by a company like  Amazon.

%p Also, this is useful if the host is the laptop in front of you.

%p Why?

%p I can use ssh to run a shell in another account on my current host.

%p Why do I want multiple accounts on my Linux laptop?

%h2 Software Isolation

%p I see an account as a container of software.

%p After I place software in an account, the account offers some protection from software in other accounts.

%p How can software harm software?

%p Software is easily shared between applications, which can then cause problems.

%p For example I can create two Rails apps: app1 and app2 using one copy of Rails 5.2.2.

%p Eventually I decide to upgrade Rails to 5.2.3.

%p Due to the upgrade, maybe app1 gets a certain set of bugs and app2 gets another set of bugs.

%p And maybe I can only fix the app1-bugs.

%p Then, I will want to run app1 on Rails 5.2.3 and run app2 on 5.2.2.

%p I see then that I need to be careful how I share software.

%p I have developed the habit of avoiding the sharing of software between applications.

%p I want each application to have its own copy of software.

%p I have three good ways to isolate an application with its software:

%ul
  %li Place the application inside its own host (very strong isolation)
  %li Place the application inside its own account (strong isolation)
  %li Rely on software isolation features inside the language:
  %li
    %ul
      %li rbenv for Ruby
      %li Bundler for Ruby
      %li Virtualenv for Python
      %li conda env for Anaconda Python


%p Option one above is the most work.
%p Option two above is my preference.
%p Option three is problematic if I build an application from several languages.

%p Now that we understand why might we want several accounts in our Linux host, lets look at the "how-to" questions.

%h2 useradd

%p I can use the "useradd" shell command to create a new account.

%p Earlier today I wanted an account named sue.

%p I started by logging into my Linux laptop with what I call my "main" account which is the account Ubuntu created when I installed Ubuntu.

%p To create the "sue" account, I issued a shell command:

.syntax
  %pre
    %code sudo useradd -m -s /bin/bash -G sudo sue

%p Next, I gave sue a password:

.syntax
  %pre
    %code sudo passwd sue

%p Then I used ssh to start a shell in the sue account:

.syntax
  %pre
    %code
      ssh sue@localhost
      whoami
      
%p You should try the above three tasks in your Linux host.

%h2 Enhance sue account

%p After I finished the above three tasks, I issued more shell commands to enhance the sue account.

%p I enhanced ~sue/.bashrc

.syntax
  %pre
    %code
      whoami
      /usr/bin/curl -L rails4.us/sue/.bashrc > ~/.bashrc

%p Notice that I called "whoami" to check that I am logged in as "sue".

%p I added more enhancements:

.syntax
  %pre
    %code /usr/bin/curl -L rails4.us/sue/.emacs     > ~/.emacs
    %code /usr/bin/curl -L rails4.us/sue/.gemrc     > ~/.gemrc
    %code /usr/bin/curl -L rails4.us/sue/.gitconfig > ~/.gitconfig

%p Next, I added an ssh key:

.syntax
  %pre
    %code ssh-keygen -t rsa

%p When the above command asks me for a password, I just press enter.

%p Then, I enhanced my ssh configuration:

.syntax
  %pre
    %code cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys
    %code /usr/bin/curl -L rails4.us/sue/.sshconfig > ~/.ssh/config
      
%p Next, I installed rbenv:

.syntax
  %pre
    =render 'lesson016a'

%p Then, I installed Ruby:

.syntax
  %pre
    %code
      rbenv install 2.6.0
      rbenv global  2.6.0
      
%p Next, I installed Rails:

.syntax
  %pre
    %code gem install rails -v 5.2.2

%p After I installed Rails, sue was ready for development activity.

%h1#hw Homework

%ul
  %li To do this lesson, which account should you use?
  %li What is the purpose of this Lesson?
  %li What is openssh-server?
  %li What is localhost?
  %li When I develop an app, what do I want to isolate?  
  %li When I develop an app, what do I want to share with other apps?  
  %li What does .bashrc do?
  %li What does .emacs do?
  %li What does .gemrc do?
  %li What does .gitconfig do?
  %li What is an ssh key?
  %li When I create an ssh key should I specify a password?
  %li What files should I keep in ~/.ssh/ folder?
  %li What is rbenv?
  %li How do I install Rails?
  %li The file: ~/.ssh/config helps me create shorter ssh commands; how?
  %li What kind of syntax tokens can I put in ~/.ssh/config ?
  %li What is the purpose of ~/.ssh/authorized_keys?
  
%hr/

%a(href='/lessons/lesson015') Lesson015
|
%a(href='/lessons/lesson017') Lesson017
