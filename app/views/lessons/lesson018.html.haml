%h1 Lesson 018 [ Rails Model Intro. ]

%h2 Model

%p A Rails model is a layer of software which connects your end-users to a database.

%h2 Standalone

%p This lesson is almost standalone.

%p This lesson should depend little on previous lessons (but depends some).

%p
  In
  %a(href='/lessons/lesson002') Lesson 002
  I asked you to install Ubuntu-16.04-Linux and then make note of the inital Linux account you created during installation.

%p To do this lesson, you should login to the account you created in Lesson 002.

%h2 Enhance Linux

%p
  I did this lesson and I started by walking through some of the steps I did in
  %a(href='/lessons/lesson003') Lesson 003.

%p I ran some Bash commands.

%p In previous lessons, I had run the commands below.

%p It is harmless to run them again:

.syntax
  %pre
    =render 'lesson018a'

%h2 may

%p Next, I issued Bash commands to create a user named: "may".

.syntax
  %pre
    %code
      sudo useradd -m -s /bin/bash -G sudo may
      sudo passwd may

%p I did this because when I start a new lesson or app, I like to keep my software isolated from other efforts in the past.

%p Next, I used ssh to log into the may account:

.syntax
  %pre
    %code
      ssh may@localhost
      whoami

%p Then, I enhanced the may account using files from lesson016:

.syntax
  %pre
    %code /usr/bin/curl -L rails4.us/sue/.bashrc    > ~/.bashrc
    %code /usr/bin/curl -L rails4.us/sue/.emacs     > ~/.emacs
    %code /usr/bin/curl -L rails4.us/sue/.gemrc     > ~/.gemrc
    %code /usr/bin/curl -L rails4.us/sue/.gitconfig > ~/.gitconfig

%h2 Ruby

%p Next, I installed Ruby:

.syntax
  %pre
    %code
      whoami
      cd ~may
      git clone https://github.com/rbenv/rbenv      .rbenv
      git clone https://github.com/rbenv/ruby-build .rbenv/plugins/ruby-build
      bash
      rbenv install 2.6.0
      rbenv global  2.6.0
      gem install rails -v 5.2.2

%h2 Postgres

%p Then, I installed a Role and a Database in Postgres both named: "may".

.syntax
  %pre
    %code
      whoami
      sudo su - postgres
      whoami
      psql -aP pager=no
      CREATE ROLE may WITH superuser login password 'july04';
      CREATE DATABASE may;
    %code \q
    %code
      whoami
      exit
      whoami

%h2 rails new

%p Next, from the may account, I created a new Rails app named carz1:

.syntax
  %pre
    =render 'lesson018railsnew'

%h2 rails generate model

%p Then, I ran a command which is new to us:

.syntax
  %pre
    %code rails generate model cartype make:string carmodel:string yr:integer

%p The above command creates files which support the Rails model named: "Cartype".

%p I used a shell command to display the model creation file:

.syntax
  %pre
    %code cat ~may/carz1/app/models/cartype.rb

%p The above file will be called every time an end-user uses a browser to ask the app to create a cartype.

%p For example, the app might serve an HTML-form which the user fills in with these values:
%ul
  %li make: "Ford"
  %li carmodel: "Mustang"
  %li yr: 2001

%p After the user presses "save", the above data will flow from the browser into a Rails object made from the Cartype model.

%p Then, Rails will copy the data into a row in a Postgres table named: "cartypes".

%p So, that is a general idea behind Rails models.

%h2 rails db:create

%p Question: How to create the "cartypes" table in Postgres?

%p I typically create a table after I generate the model.

%p For this lesson my next Bash commands after generating the model, are listed below:

.syntax
  %pre
    %code
      rails db:create
      rails db:migrate

%p After I ran the above commands, Postgres created the cartypes table inside a database named: "carz1_development".

%p I used these Bash commands to list the table:

.syntax
  %pre
    %code
      alias psqn='psql -aP pager=no'
      psqn -d carz1_development
    %code \d cartypes
    %code \q

%h2 rails console

%p Rails has a useful CLI called console.

%p After I disconnected from psql, I typed in Bash commands:

.syntax
  %pre
    %code
      cd ~may/carz1
      rails console

%p Rails connected me to its console.

%p I typed in a Rails command to create a row in the cartypes table:

.syntax
  %pre
    %code
      my_rav4 = Cartype.create({:make => 'Toyota', :carmodel => 'Rav4', :yr => 2010})
      quit

%p After I was returned to the shell, I asked Postgres to list the cartypes table:

.syntax
  %pre
    %code
      alias psqc ='psqn -d carz1_development'
      psqc
      SELECT * FROM cartypes;
    %code \q

%p Next, I used an alternative syntax to add another row:

.syntax
  %pre
    %code
      rails console
      ur_civic = Cartype.create :make => 'Honda', :carmodel => 'Civic', :yr => 1999
      quit
      
%p Again, I asked Postgres to list the cartypes table:

.syntax
  %pre
    %code
      psqc
      SELECT * FROM cartypes;
    %code \q

%p The above examples are significant because they demonstrate how to Create a "Record" which is the same as a row in a Postgres table.

%h2 CRUD

%p Three other actions we should learn are: Retrieve, Update, Delete.

%p I can create an acronym, "CRUD", from the the four actions available for Records:

%ul
  %li C for Create
  %li R for Retrieve
  %li U for Update
  %li D for Delete

%h2 Retrieve

%p I used rails console to demonstrate how to Retrieve a record from Postgres into a Rails object:

.syntax
  %pre
    %code
      rails console
      toyotas = Cartype.where   :make => 'Toyota'
      ahonda  = Cartype.find_by :make => 'Honda'
      toyotas[0].make
      toyotas[0].carmodel
      toyotas[0].yr
      ahonda.make
      ahonda.carmodel
      ahonda.yr
      quit

%p The syntax above displays the idea that Cartype.where() should return a collection of Records.
%p And it shows that Cartype.find_by() should return only one Record.

%p A method named: "find_by_sql()" is useful if you like the SQL language:

.syntax
  %pre
    %code
      rails console
      sql_s  = "SELECT * FROM cartypes WHERE yr > 1990"
      fbsql1 = Cartype.find_by_sql(sql_s)
      sql_a  = ["SELECT * FROM cartypes WHERE yr > ?", 1990]
      fbsql2 = Cartype.find_by_sql(sql_a)
      fbsql1[0].carmodel
      fbsql2[0].carmodel
      quit
      
%p The above demo shows that find_by_sql() will accept either a string or an array.

%p The array-technique is considered more secure by some people who worry about SQL-injection attacks.

%p Also note that find_by_sql() is like the where() method; we should assume that it will return a collection of Records rather than just one.

%h2 Update

%p To demonstrate Update, I typed some syntax into a Rails console:

.syntax
  %pre
    %code
      rails console
      ahonda = Cartype.find_by_yr(1999)
      ahonda.carmodel = 'Accord'
      ahonda.save
      quit
      
%p A general idea to see in the above demo is that in order to update data, I should do it one record at a time.

%p If I am brave, Rails does offer an update_all() method which is demonstrated below:

.syntax
  %pre
    %code
      rails console
      Cartype.update_all("make = 'Ford'")
      quit

%p Another way to Update, is to place an SQL-UPDATE command in a call to find_by_sql():

.syntax
  %pre
    %code
      rails console
      sql1_s = "UPDATE cartypes SET make = 'Toyota' WHERE carmodel = 'Rav4'"
      sql2_s = "UPDATE cartypes SET make = 'Honda'  WHERE carmodel = 'Accord'"
      Cartype.find_by_sql(sql1_s)
      Cartype.find_by_sql(sql2_s)
      quit
      
%p Based on the above behavior, I think that find_by_sql() should be renamed to run_sql().

%h2 Delete

%p Delete is easy to demonstrate:

.syntax
  %pre
    %code
      rails console
      ahonda = Cartype.find_by :make => 'Honda'      
      ahonda.destroy
      quit

%p The above demo shows the idea that Rails wants me to delete objects one at a time.

%p If, however, I am brave I can call destroy_all() which removes all Cartype records:

.syntax
  %pre
    %code
      rails console
      Cartype.destroy_all
      quit

%p Perhaps destroy_all() is a good place to end this lesson.

%p Later we will revisit Rails Models to learn about concepts: Association, Validation, and Callbacks.

%p If, however, you are in a hurry, study results from these queries:

%ul
  %li
    %a(href='https://www.google.com/search?q=rails+activerecord+Association' target='x')
      https://www.google.com/search?q=rails+activerecord+Association
  %li
    %a(href='https://www.google.com/search?q=rails+activerecord+Validation' target='x')
      https://www.google.com/search?q=rails+activerecord+Validation
  %li
    %a(href='https://www.google.com/search?q=rails+activerecord+Callbacks' target='x')
      https://www.google.com/search?q=rails+activerecord+Callbacks

%h1#hw Homework

%ul
  %li Why is a Rails model important to the Rails developer?
  %li How to configure Postgres to work well with Rails?
  %li How to configure Rails to work with Postgres?
  %li How to generate a model?
  %li What do I create when I generate a model?
  %li If I create a model named Dog, what is the name of the corresponding table?
  %li Which command in Rails creates a database in Postgres?
  %li Which command in Rails creates a table in Postgres?
  %li How to ask psql to connect to a database named: "fred55"?
  %li What is the Rails console?
  %li Why use the Rails console?
  %li In Rails how to create a Model Record?
  %li After I create a Record how to verify creation with psql?
  %li What is CRUD?
  %li What is the where() method?
  %li What is the find_by() method?
  %li Why might I use where() instead of find_by()?
  %li Why might I use find_by_sql()?
  %li How to supply an SQL command to find_by_sql()?
  %li What are three general ways to update a table with Rails?
  %li How to delete records with Rails?
  
%hr/

%a(href='/lessons/lesson017') Lesson017

