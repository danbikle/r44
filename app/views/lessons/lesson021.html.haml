%h1 Lesson 021 [ Rails Scaffold Part 2 ]

%h2 Dependent

%p
  This lesson depends on
  %a(href='/lessons/lesson020') Lesson 020 [ Rails Scaffold Part 1 ]

%p
  I started this lesson by reviewing my steps in Lesson 020:


%h2 Lesson 020, I Enhanced Linux:

.syntax
  %pre
    =render 'lesson018a'

%h2 Lesson 020, I created "ron" account and logged into ron account:

.syntax
  %pre
    %code
      sudo useradd -m -s /bin/bash -G sudo ron
      sudo passwd ron
      ssh ron@localhost
      
%h2 Lesson 020, I enhanced the ron account:

.syntax
  %pre
    %code /usr/bin/curl -L rails4.us/sue/.bashrc    > ~/.bashrc
    %code /usr/bin/curl -L rails4.us/sue/.emacs     > ~/.emacs
    %code /usr/bin/curl -L rails4.us/sue/.gemrc     > ~/.gemrc
    %code /usr/bin/curl -L rails4.us/sue/.gitconfig > ~/.gitconfig

%h2 Lesson 020, I installed Ruby:

.syntax
  %pre
    %code
      whoami
      cd ~ron
      git clone https://github.com/rbenv/rbenv      .rbenv
      git clone https://github.com/rbenv/ruby-build .rbenv/plugins/ruby-build
      bash
      rbenv install 2.6.0
      rbenv global  2.6.0
      gem install rails -v 5.2.2

%h2 Lesson 020, I created a new Rails app:

.syntax
  %pre
    =render 'lesson020rnew'

%h2 Lesson 020, I created "scaffolds":

.syntax
  %pre
    %code
      cd ~ron/petz1
      rails generate scaffold Owner name:string phone:string email:string location:string
      rails generate scaffold Pet name:string pettype:string age:integer owner:belongs_to

%h2 Lesson 020, I created tables:

.syntax
  %pre
    %code rails db:migrate
    
%h2 Lesson 020, I started "rails console":

.syntax
  %pre
    %code rails console

%h2 Lesson 020, I created an owner-object named: rob_grey:

.syntax
  %pre
    %code rob_grey = Owner.create :name => 'Rob Grey',
    %code :phone => '650-253-0000', 
    %code :email => 'rob@grey100.edu', 
    %code :location => 'Tahoe'

%h2 Lesson 020, I created a pet-object named: roger:

.syntax
  %pre
    %code roger = Pet.create :name => 'Roger', :pettype => 'Dog', :age => 6, :owner => rob_grey
    
%h2 Lesson 020, I enhanced owner.rb:

.syntax
  %pre
    %code
      sed -i '2s/end/  has_many :pets/ ; 2a end' app/models/owner.rb
      cat app/models/owner.rb

%h2 Lesson 020, I started rails console:

.syntax
  %pre
    %code rails console

%h2 Lesson 020, I called Owner.find_by_phone()

.syntax
  %pre
    %code rob_grey = Owner.find_by_phone '650-253-0000'

%h2 Lesson 020, I asked rob_grey to adopt a cat named: "Rebel".

.syntax
  %pre
    %code
      Pet.create :name => 'Rebel', :pettype => 'Cat', :age => 1, :owner => rob_grey

%h2 Lesson 020, I asked rob_grey to list the names of his pets:

.syntax
  %pre
    %code
      rob_grey.pets[0].name # Roger
      rob_grey.pets[1].name # Rebel
      rob_grey.pets[2].name # should fail

%p All of the above content is a quick review of Lesson 020.

%h2 webserver.bash

%p After I studied Lesson 020 and understood I was ready for Lesson 021, I created a Bash script to start the Rails webserver.

%p To start work on the script, I verified I was logged into Linux as ron:

.syntax
  %pre
    %code whoami

%p I created a folder named: ~ron/petz1/script

.syntax
  %pre
    %code mkdir ~ron/petz1/script

%p I used Bash-echo commands to create a script named: webserver.bash

.syntax
  %pre
    %code
      cd ~ron/petz1/script
      echo rails server -b 0.0.0.0 -p 3910 > webserver.bash
      chmod u+x webserver.bash

%p I used webserver.bash to start the webserver:

.syntax
  %pre
    %code
      cd ~ron/petz1
      script/webserver.bash

%p I used my browser to visit the local webserver:

%p http://localhost:3910

%p I saw this:

%img(src='/lesson021/yay3910.png')
%hr/

%h2 rails routes

%p Rails supports an idea called "routes".
%p A route is a general idea.
%p In Rails, a route is a feature used to implement the general idea.

%h2 "/pets"

%p A simple way to understand a route is to discuss the "/pets" route.

%p In Lesson 020, when I created the Pet scaffold, I saw it create some things:

%ul
  %li Pet model
  %li pets table
  %li "pet belongs_to :owner" Association

%p In addition, the Pet scaffold had created some routes.

%p One of the routes is the "/pets" route which is a somewhat complicated thing.

%p To simplify the "/pets" route, I say that it is string which the browser will accept and then pass to the Rails webserver as a "GET-request".

%p The "GET-request" will pass through several layers of Rails software.

%p Rails will transform the request into a response.

%p As Rails builds the response, Rails will use ERB, which we studied in Lesson 011, to attach some HTML to the response.

%p Eventually, Rails will finish building the response and hand it to the webserver.

%p The webserver might enhance it a little bit and then send the response to the browser as a stream of:

%ul
  %li HTML
  %li CSS
  %li JavaScript
  %li "Headers"

%p The browser will receive it and render it into a human readable page:

.syntax
  %pre
    =render 'lesson021reqdiagram'

%p Note, that some Rails developers will refer to both the request and the response with one word: "Action".

%p The word "Action" also appears in discussions about Rails controllers but let's ignore that for now.

%p To help you understand this a little more, I typed the "/pets" route into my browser as this string:

%p http://localhost:3910/pets

%p After I pressed the enter key, the browser sent a request to Rails.

%p Rails responded, and the browser rendered the response.

%p I saw this:

%img(src='/lesson021/pets1.png')
%hr/

%p I might ask an obvious question about the above page:

%p I can see information about the two pets: Roger, and Rebel.
%p Where does that information come from?

%p An experienced Rails developer would offer this answer:

%p The information about Roger and Rebel is coming from the Pet model class which we studied in lesson020.

%p And the Pet model class gets its information from a table named pets in the sqlite database:

%p ~ron/petz1/db/development.sqlite3

%p As proof, I used rails console to add another pet named Riley and I refreshed the page:

.syntax
  %pre
    %code
      rails console
      rob_grey = Owner.find_by_phone '650-253-0000'
      Pet.create :name => 'Riley', :pettype => 'Bird', :age => 2, :owner => rob_grey
      
%img(src='/lesson021/riley.png')
%hr/

%p So, we can see the rendered page above.

%h2 HTML from "/pets" Action

%p What does the HTML look like (which created the page)?
%p I used the curl Bash-command to display the HTML syntax which created the page:

.syntax
  %pre.sbar999
    =render 'lesson021pets_html'

%p An experienced web-developer might ask two questions about the above HTML:

%ul
  %li Where does that HTML come from?
  %li As a developer, how do I control it?

%p An experienced Rails developer would offer answers.

%p An initial answer, one of many, might look like this:

%p Some of the HTML contains data which comes from the Pet model.

%p For example here are some td-elements which contain information about Roger the dog:

.syntax
  %pre
    =render 'lesson021roger_html'

%h2 Layout

%p The HTML near the top comes from an ERB file which Rails people often call: "The Layout", which is located here:

.syntax
  %pre
    %code ~ron/petz1/app/views/layouts/application.html.erb

%p So, the first file a developer might enhance to get better control over HTML from the action is listed above.

%p I used cat to display the above file and saw this:

.syntax
  %pre
    =render 'lesson021layout'
    
%p The above file was generated when I generated the scaffold.

%p The above file is simple; an experienced Rails developer would be quick to enhance the file.

%p Typically what I do is add links to the file which are then displayed at the top and bottom of every page served from the Rails site.

%p For example, the page you are currently reading has these links at the top and bottom:

%p
  %a(href='/about') About
  %a(href='/blog') Blog
  %a(href='/contact') Contact
  %a(href='/home/links') Links
  %a(href='https://meetup.com/cs101a' target='x') Meetup
  %a(href='/lessons') Lessons

%p After I compare the ERB syntax to the HTML syntax I can describe a little bit of what Rails is doing with the Layout-ERB.

%p This ERB:

.syntax
  %pre
    %code &lt;%= csrf_meta_tags %>

%p Becomes this HTML:

.syntax
  %pre.sbar999
    %code &lt;meta name="csrf-param" content="authenticity_token" />
    %code &lt;meta name="csrf-token" content="JWZ9EIFX0XjAXR4IS2a9KZcDTX8KjSRIyVuLGHpU+gY7DgfK0rkI29cHPRrNSzwqrxnwkRa7b7/Xpf7B6o+VRA==" />

%p This ERB:

.syntax
  %pre
    %code &lt;%= stylesheet_link_tag    'application', media: 'all' %>

%p Becomes this HTML:

.syntax
  %pre
    %code &lt;link rel="stylesheet" media="all" href="/stylesheets/application.css" />

%p The Layout-ERB supplies only some of the HTML for the "/pets" page.

%p Where does the HTML in the middle of the page come from?

%p A Rails developer would say, "It comes from a template, not the layout."

%h2 "/pets" Template

%p The template for the "/pets" action is a file which we can find here:

.syntax
  %pre
    %code ~ron/petz1/app/views/pets/index.html.erb

%p So, the second file a developer might enhance to get better control over HTML from the action is listed above.

%p I used cat to display the template-file:

.syntax
  %pre
    =render 'lesson021template'

%p To understand the syntax in the above file, you need to understand content in these previous lessons:

%ul
  %li
    %a(href='/lessons/lesson009') Lesson 009 [ HTML Intro. ]
  %li
    %a(href='/lessons/lesson010') Lesson 010 [ CSS Intro. ]
  %li
    %a(href='/lessons/lesson011') Lesson 011 [ Rails ERB Intro. ]
  %li
    %a(href='/lessons/lesson015') Lesson 015 [ Rails Controller Intro. ]
  %li
    %a(href='/lessons/lesson018') Lesson 018 [ Rails Model Intro. ]
  %li
    %a(href='/lessons/lesson019') Lesson 019 [ SQLite Intro. ]
  %li
    %a(href='/lessons/lesson020') Lesson 020 [ Rails Scaffold Part 1 ]

%p If you wrestled with the homework in the above lessons, you should be well set to continue.

%p A quick discussion of the template-file will serve as a partial review.

%p This syntax:

.syntax
  %pre
    %code &lt;p id="notice"><%= notice %>&lt;/p>

%p is a mixture of HTML and ERB.

%p The ERB portion is trying to get a string from Ruby using something named: "notice".

%p It's not clear if "notice" is a variable or method-call.

%p In Ruby, a method-call can look something like this:

.syntax
  %pre
    %code notice
%p Or:
.syntax
  %pre
    %code notice()

%p Many Ruby developers always drop parenthesis given the opportunity.

%p The scaffold created the notice-ERB to give Rails a mechanism for sending notices to the end user.

%p You might ask, "What kind of notices?"

%p Answer: Rails notifies you after you make a mistake or do something noteworthy like adding a new pet.

%p Another section of syntax in the template file is listed below:

.syntax
  %pre
    =render 'lesson021template2'

%p The above syntax has no ERB, just pure HTML.

%p I translate it to English:

%ul
  %li We have a table-element.
  %li A table-element is useful for displaying tablular data.
  %li Inside it we have a thead-element.
  %li Inside that we have a tr-element.
  %li Inside that we have a 5 th-elements.
  %li The last th element is empty.
  %li The last th element has an attribute: colspan="3".
  %li This means that tr-elements after the current tr-element will have 3 more columns than this tr-element.
  
%p After that, I see more interesting syntax in the template file:

.syntax
  %pre
    %code &lt;% @pets.each do |pet| %>

%p We first encountered syntax like that in Lesson 011.

%p If you don't remember it, let's relearn it.

%p The above line is embedding Ruby syntax inside HTML.

%p Why?

%p HTML lacks the ability to implement: "code reuse".

%p Three examples of code reuse are listed below:

%ul
  %li Using variables to store values so we can reuse the values
  %li Using functions to store syntax so we can reuse syntax
  %li Using loops to repeatedly reuse syntax 

%p So, the above ERB syntax is using Ruby to mix HTML with variables and a loop.

%p It is easy to study the above loop using "rails console":

.syntax
  %pre.sbar999
    =render 'lesson021template3'

%p So, the above loop is controlled by @pets which is a collection of three pet-objects.

%p Inside the loop we can access attributes of each pet object with a call like this:

.syntax
  %pre
    %code pet.name
    
%p Now that we understand the Ruby which drives a loop, let's study the ERB syntax which harnesses the loop to generate reusable HTML:

.syntax
  %pre.sbar999
    =render 'lesson021template4'

%p Knowing that @pets contains three pets I know that the above syntax will generate three tr-elements.

%p Also I see ERB syntax inside the loop. And I know that Rails will transform that syntax into HTML.

%p Do you see the equal-signs in the above syntax?

%p We learned in Lesson 011 that an expression like this:

.syntax
  %pre
    %code &lt;%= pet.name %>

%p is asking Ruby to get a string-value out of an object attribute so so we can mix the value with HTML.

%p An expression like this:

.syntax
  %pre
    %code &lt;% do_something() %>

%p is asking Ruby to do something but display nothing.

%p Returning our attention back to the ERB syntax inside the loop, I noticed this expression:

.syntax
  %pre
    %code &lt;%= link_to 'Show', pet %>

%p What does the above expression do?

%p It was easy to see the rendered link in the image below:
      
%img(src='/lesson021/riley.png')
%hr/

%p And, it was easy to find the corresponding HTML:

.syntax
  %pre
    %code &lt;a href="/pets/1">Show&lt;/a>

%h2 End Lesson 021

%p This lesson [ Rails Scaffold Part 2 ] is too long.

%p Now is a good time to end it.

%p If you have questions about the above content, transform them into Homework exercises and work on answering them.

%p It is possible that the next lesson,
%p
  %a(href='/lessons/lesson022') Lesson022 [ Rails Scaffold Part 3 ]
%p will answer some of your current questions.

%h1#hw Homework

%ul
  %li Does Lesson 021 depend on Lesson 020?
  %li Which Linux user should I use for Lesson 021?
  %li In this lesson, why start the webserver?
  %li What is a route?
  %li Why is the "/pets" a good route to study?
  %li What is a "request"?
  %li What is a "response"?
  %li What is an "Action"?
  %li What is a GET-request?
  %li Why study GET-requests when studying routes?
  %li How does an end-user learn which routes are available on a site?
  %li Can ERB syntax talk directly with a database?
  %li When working with ERB why is "rails console" useful?
  %li When a browser receives HTML from Rails, where did the HTML come from?
  %li In Rails what is a "Layout"?
  %li In Rails what is a "Template"?
  %li Why would I combine a Layout with a Template?
  %li Given Layout and Template, which is on the outside (or inside)?
  %li How to place a set of links atop every page served by Rails?
  %li Is "stylesheet_link_tag" the name of a method?
  %li Often Ruby allows me to drop parenthesis from method calls,
  %li should I drop parenthesis from method calls as a habit?
  %li In HTML, what does colspan="3" do?
  %li In Ruby, if I create a variable named: "@hello"
  %li is that much different than creating a variable named: "hello" ?
  %li Why is code reuse useful?
  %li At the end of this lesson we saw an HTML a-element:
  %li
    .syntax
      %pre
        %code &lt;a href="/pets/1">Show&lt;/a>
  %li Is the string, "/pets/1" a route?

  
%hr/

%a(href='/lessons/lesson020') Lesson020
|
%a(href='/lessons/lesson022') Lesson022
