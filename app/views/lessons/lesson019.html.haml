%h1 Lesson 019 [ SQLite Intro. ]

%h2 Standalone

%p This lesson is almost standalone.

%p This lesson should depend little on previous lessons (but depends some).

%p
  In
  %a(href='/lessons/lesson002') Lesson 002
  I asked you to install Ubuntu-16.04-Linux and then make note of the inital Linux account you created during installation.

%p To do this lesson, you should login to the account you created in Lesson 002.

%h2 Enhance Linux

%p I did this lesson and I started by walking through some of the steps I did in Lesson 003.

%p I ran some Bash commands.

%p In previous lessons, I had run the commands below.

%p It is harmless to run them again:

.syntax
  %pre
    =render 'lesson018a'

%h2 abe

%p Next, I issued Bash commands to create a user named: "abe".

.syntax
  %pre
    %code
      sudo useradd -m -s /bin/bash -G sudo abe
      sudo passwd abe

%p I did this because when I start a new lesson or app, I like to keep my software isolated from other efforts in the past.

%p Next, I used ssh to log into the abe account:

.syntax
  %pre
    %code
      ssh abe@localhost
      whoami

%p Then, I enhanced the abe account using files from lesson016:

.syntax
  %pre
    %code /usr/bin/curl -L rails4.us/sue/.bashrc    > ~/.bashrc
    %code /usr/bin/curl -L rails4.us/sue/.emacs     > ~/.emacs
    %code /usr/bin/curl -L rails4.us/sue/.gemrc     > ~/.gemrc
    %code /usr/bin/curl -L rails4.us/sue/.gitconfig > ~/.gitconfig

%h2 Ruby

%p Next, I installed Ruby:

.syntax
  %pre
    %code
      whoami
      cd ~abe
      git clone https://github.com/rbenv/rbenv      .rbenv
      git clone https://github.com/rbenv/ruby-build .rbenv/plugins/ruby-build
      bash
      rbenv install 2.6.0
      rbenv global  2.6.0
      gem install rails -v 5.2.2

%h2 Rails

%p Then, I ran a Bash command to create a new Rails app:

.syntax
  %pre
    =render 'lesson019rnew'

%h2 Dog

%p Next, I ran a Bash command to create a model named: "Dog" inside the Rails app:

.syntax
  %pre
    %code
      cd ~abe/dogz1
      rails generate model Dog name:string breed:string age:integer owner:string phone:string

%h2 dogs

%p Then, I ran another command to create a table named dogs to support the Dog-model:

.syntax
  %pre
    %code rails db:migrate
    
%h2 development.sqlite3

%p Next, I looked for the database file used by sqlite.

%p I found it:

.syntax
  %pre
    %code ~abe/dogz1/db/development.sqlite3

%h2 sqlite3

%p Then, I connected to it with a Bash command named: "sqlite3":

.syntax
  %pre
    %code
      cd ~abe/dogz1/db
      sqlite3 development.sqlite3

%p I saw this:

.syntax
  %pre
    %code
      abe@rails4us11:~/dogz1/db$ sqlite3 development.sqlite3
      SQLite version 3.11.0 2016-02-15 17:29:24
      Enter ".help" for usage hints.
      sqlite> 
      sqlite> 
      sqlite>

%p I entered a simple command:

.syntax
  %pre
    %code .help

%p I learned that sqlite commands start with a dot.

%p I tried some commands which seemed easy:

.syntax
  %pre
    %code .databases
    %code .dbinfo
    %code .fullschema
    %code .schema 
    %code .schema dogs
    %code .tables
    %code .tables dogs

%h2 SQL

%p I tried some SQL commands:

.syntax
  %pre
    %code
      CREATE TABLE cats (name string, breed varchar, age integer, owner varchar, phone varchar);
      CREATE TABLE cats (catname string); -- should give error
      INSERT INTO cats VALUES ('Bud', 'Tabby', 4, 'Alex', '650-253-0000');
      SELECT * FROM cats WHERE AGE < 8;
      UPDATE cats SET name = 'Buddy' WHERE phone = '650-253-0000';
      DELETE FROM cats WHERE name = 'Knight';
      DROP TABLE cats;
      DROP TABLE cats; -- should give error

%p They worked!

%p I copied the above SQL commands into a file: /tmp/cats.sql

%p I used this syntax to run the file:

.syntax
  %pre
    %code .read /tmp/cats.sql

%p It worked!

%p After that, I quit from Sqlite with this command:

.syntax
  %pre
    %code .quit

%h2 .import

%p A common use-case for Sqlite is to read CSV data into a table.

%p After the table is filled, I can run SELECT statements to study the data.

%p I started this demo by getting a CSV file:

.syntax
  %pre
    %code
      cd /tmp
      curl -L rails4.us/gspc.csv > gspc.csv
      head gspc.csv
      sed -i 1d gspc.csv
      head gspc.csv

%p Next, I started sqlite3 and did the demo:

.syntax
  %pre
    %code
      sqlite3 mydb.sqlite3
    %br
    %code
      CREATE TABLE prices (cdate date
      ,opnp number
      ,hip number
      ,lowp number
      ,closep number
      ,acp number
      ,vol number);
    %br
    %code .separator ","
    %code .import gspc.csv prices
    %code
      SELECT COUNT(cdate),  MIN(cdate),  MAX(cdate)  FROM prices;
      SELECT COUNT(closep), MIN(closep), MAX(closep) FROM prices;
      SELECT cdate, closep FROM prices WHERE closep = (SELECT MAX(closep) FROM prices);
      SELECT cdate, closep FROM prices WHERE cdate BETWEEN '2018-12-01' AND '2018-12-31';

%p A good site full of SQLite examples is listed below:
%p
  %a(href='https://www.sqlite.org/index.html' target='x')
    https://www.sqlite.org/index.html
  

%h1#hw Homework

%ul
  %li Why learn SQLite?
  %li Why use SQLite?
  %li After you have studied Lesson 018 can you demonstrate how to pass data between SQLite and Postgres?
  %li Which website is full of good SQLite examples?
  %li Which version of SQLite comes with Ubuntu 16.04?
  %li Which version of SQLite supports window functions?
  
%hr/

%a(href='/lessons/lesson018') Lesson018
|
%a(href='/lessons/lesson020') Lesson020
