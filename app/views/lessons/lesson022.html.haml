%h1 Lesson 022 [ Rails Scaffold Part 3 ]

%h2 Dependent

%p
  This lesson depends on
%ul
  %li
    %a(href='/lessons/lesson020') Lesson 020 [ Rails Scaffold Part 1 ]
  %li
    %a(href='/lessons/lesson021') Lesson 021 [ Rails Scaffold Part 2 ]

%p
  I started this lesson by reviewing my steps in Lesson 020:


%h2 Lesson 020, I Enhanced Linux:

.syntax
  %pre
    =render 'lesson018a'

%h2 Lesson 020, I created "ron" account and logged into ron account:

.syntax
  %pre
    %code
      sudo useradd -m -s /bin/bash -G sudo ron
      sudo passwd ron
      ssh ron@localhost
      
%h2 Lesson 020, I enhanced the ron account:

.syntax
  %pre
    %code /usr/bin/curl -L rails4.us/sue/.bashrc    > ~/.bashrc
    %code /usr/bin/curl -L rails4.us/sue/.emacs     > ~/.emacs
    %code /usr/bin/curl -L rails4.us/sue/.gemrc     > ~/.gemrc
    %code /usr/bin/curl -L rails4.us/sue/.gitconfig > ~/.gitconfig

%h2 Lesson 020, I installed Ruby:

.syntax
  %pre
    %code
      whoami
      cd ~ron
      git clone https://github.com/rbenv/rbenv      .rbenv
      git clone https://github.com/rbenv/ruby-build .rbenv/plugins/ruby-build
      bash
      rbenv install 2.6.0
      rbenv global  2.6.0
      gem install rails -v 5.2.2

%h2 Lesson 020, I created a new Rails app:

.syntax
  %pre
    =render 'lesson020rnew'

%h2 Lesson 020, I created "scaffolds":

.syntax
  %pre
    %code
      cd ~ron/petz1
      rails generate scaffold Owner name:string phone:string email:string location:string
      rails generate scaffold Pet name:string pettype:string age:integer owner:belongs_to

%h2 Lesson 020, I created tables:

.syntax
  %pre
    %code rails db:migrate
    
%h2 Lesson 020, I started "rails console":

.syntax
  %pre
    %code rails console

%h2 Lesson 020, I created an owner-object named: rob_grey:

.syntax
  %pre
    %code rob_grey = Owner.create :name => 'Rob Grey',
    %code :phone => '650-253-0000', 
    %code :email => 'rob@grey100.edu', 
    %code :location => 'Tahoe'

%h2 Lesson 020, I created a pet-object named: roger:

.syntax
  %pre
    %code roger = Pet.create :name => 'Roger', :pettype => 'Dog', :age => 6, :owner => rob_grey
    
%h2 Lesson 020, I enhanced owner.rb:

.syntax
  %pre
    %code
      sed -i '2s/end/  has_many :pets/ ; 2a end' app/models/owner.rb
      cat app/models/owner.rb

%h2 Lesson 020, I started rails console:

.syntax
  %pre
    %code rails console

%h2 Lesson 020, I called Owner.find_by_phone()

.syntax
  %pre
    %code rob_grey = Owner.find_by_phone '650-253-0000'

%h2 Lesson 020, I asked rob_grey to adopt a cat named: "Rebel".

.syntax
  %pre
    %code
      Pet.create :name => 'Rebel', :pettype => 'Cat', :age => 1, :owner => rob_grey

%h2 Lesson 020, I asked rob_grey to list the names of his pets:

.syntax
  %pre
    %code
      rob_grey.pets[0].name # Roger
      rob_grey.pets[1].name # Rebel
      rob_grey.pets[2].name # should fail

%p All of the above content is a quick review of Lesson 020.

%h2 Lesson 021, webserver.bash

%p After I studied Lesson 020 and understood I was ready for Lesson 021, I created a Bash script to start the Rails webserver:

.syntax
  %pre
    %code mkdir ~ron/petz1/script

.syntax
  %pre
    %code
      cd ~ron/petz1/script
      echo rails server -b 0.0.0.0 -p 3910 > webserver.bash
      chmod u+x webserver.bash

%p I used webserver.bash to start the webserver:

.syntax
  %pre
    %code
      cd ~ron/petz1
      script/webserver.bash

%p I used my browser to visit the local webserver:

%p http://localhost:3910

%p I saw this:

%img(src='/lesson021/yay3910.png')
%hr/

%h2 bin/rails routes

%p To start this lesson, I ran a simple Bash command:

.syntax
  %pre
    %code
      cd ~ron/petz1
      bin/rails routes

%p Rails responded with information about all the routes available in the app:

.syntax
  %pre
    =render 'lesson022rroutes'

%p I Lesson 021 I spent some time describing the "/pets" route.

%p We can see in the output above, we actually have two "/pets" routes:

.syntax
  %pre
    =render 'lesson022rroutes2'

%p Of the two routes, which one did I describe in Lesson 021?

%p Answer: I described this one:

.syntax
  %pre
    =render 'lesson022rroutes3'

%p I can see above, that the route is described by 5 pieces of information:

.syntax
  %pre
    %code Prefix Verb   URI Pattern                Controller#Action

%h2 Prefix

%p The Prefix is a string I see at various times when I want Rails to interact with the route.

%p I see an example of that at the bottom of this file:

.syntax
  %pre
    %code ~ron/petz1/app/views/pets/show.html.erb

%p I see this:

.syntax
  %pre
    %code &lt;%= link_to 'Back', pets_path %>

%p The prefix of pets_path is "pets" which we see listed in the first route above.

%p Rails will transform the above ERB expression into this HTML:

.syntax
  %pre
    %code &lt;a href="/pets">Back&lt;/a>

%p Usually when I work with Rails ERB, I prefer to create links from the URI rather than the Prefix.

%p So instead of writing this in my ERB:

.syntax
  %pre
    %code &lt;%= link_to 'Back', pets_path %>

%p I'd write this:

.syntax
  %pre
    %code &lt;a href="/pets">Back&lt;/a>

%p Or this:

.syntax
  %pre
    %code &lt;a href="/pets">List of Pets&lt;/a>

%h2 Verbs

%p The second piece of information in a route is the "Verb".

%p Most web developers know about verbs and can usually list them in a job interview:

%ul
  %li GET
  %li POST
  %li PATCH
  %li PUT
  %li DELETE

%p If I forget them, I type a simple shell command to see them:

.syntax
  %pre
    =render 'lesson022rroutes'

%p In Lesson 021 I displayed a diagram which will be helpful here:

.syntax
  %pre
    =render 'lesson021reqdiagram'

%p Above, we see a Request moving from browser to webserver.

%p The Request contains one of the verbs.

%h2 GET Verb

%p Usually the verb is: "GET".

%p I think of a GET-request as me telling the webserver: "GET me a page".

%p As a developer I can ask you to send a GET-request to my webserver by offering you a page full of links.

%p After you click a link, the string of the href-attribute will get loaded into the browser URL field:

.syntax
  %pre
    %code &lt;a href="/pets">List of Pets&lt;/a>

%p Then the browser sends a GET-request to the URL and hopefully that URL points to a route in my webserver.

%h2 POST Verb

%p A POST Request usually happens when I fill out a form and press the Save button.

%p By convention, Rails wants the developer to make the form in a way to send a POST only if the end-user wants to create something new like a new pet or new owner.

%h2 PUT, PATCH Verbs

%p PUT, and PATCH Requests usually happen when the user uses a form to alter something which already exists like Roger the dog.

%h2 DELETE Verb

%p As a developer sometimes I will create a special kind of link which a user uses to delete something like a pet or owner.

%p The link needs special syntax so that a DELETE is inside the request rather than a GET.

%p Here is an example of ERB which will create a link to delete a pet:

.syntax
  %pre
    %code &lt;%= link_to 'Destroy', pet, method: :delete, data: { confirm: 'Are you sure?' } %>

%p Rails will transform the above ERB into HTML listed below:

.syntax
  %pre
    %code &lt;a data-confirm="Are you sure?" rel="nofollow" data-method="delete" href="/pets/1">Destroy&lt;/a>

%p If I click the above link, the browser will send a DELETE request to the webserver.

%p The Rails app will see both the DELETE and "/pets/1".

%p Then the app will match the request to this route:

.syntax
  %pre
    =render 'lesson022rroutes4'
    
%h2 pets#destroy

%p The above route will ask Rails to create a controller object from a class named: PetsController

%p The resulting object will have a method named destroy().

%p Rails will call controller_object.destroy()

%p I found syntax which supports the above call in this file:

.syntax
  %pre
    %code ~ron/petz1/app/controllers/pets_controller.rb

%p The above file was created during Lesson 020 when I created the Pet-scaffold.

%p I found the destroy() method in the above file:

.syntax
  %pre
    =render 'lesson022delmeth'

%p For an HTML-format-request, I translate the above method into English:

%ul
  %li The method starts with two comments which tell the developer that this method is called when the end-user sends a DELETE-request to either /pets/1 or /pets/1.json.
  %li The "1" is actually an example of a value.
  %li DELETE /pets/6 would also call the method.
  %li The method is called destroy() and notice that it takes no parameters.
  %li The first line in the method calls @pet.destroy().
  %li @pet is an object created from the Pet-model-class (before destroy() is called).
  %li @pet is an example of a Ruby instance variable.
  %li
    @pet starts with an @-sign because we want @pet to be available in both the 
    PetsController object and any template file
    in ~ron/petz1/app/views/pets/ folder.
  %li Rails depends on a Rails convention that @somevariable is intended to be shared between controller objects and ERB in templates.
  %li Next, destroy() looks at the format of the request.
  %li If the request is HTML-format (from a browser usually), destroy() should return a response which redirects the browser to another route called pets_url.
  %li Additionally, destroy() should fill the notice-object in the template with a string:
  %li 'Pet was successfully destroyed.'

%h2 byebug + rails server + curl

%p The above translation of destroy() is useful for understanding a piece of controller behavior.

%p Another way to see the controller in action is to operate three pieces of software simultaneously.

%p I started this exercise by using sed to place a call to byebug() inside the index() method of PetsController:

.syntax
  %pre
    %code
      cd ~ron/petz1/app/controllers
      head pets_controller.rb
      sed -i '/def index/a byebug()' pets_controller.rb
      head pets_controller.rb

%p I displayed output from the last command

.syntax
  %pre
    =render 'lesson022headpet'

%p Next, I started the rails webserver using the script I created earlier:

.syntax
  %pre
    %code
      cd ~ron/petz1/
      script/webserver.bash

%p In another shell I ran a simple curl command:

.syntax
  %pre
    %code curl localhost:3910/pets

%p I returned to the webserver-shell and saw this:

.syntax
  %pre.sbar999
    =render 'lesson022wss10'
    
%p The above output is text displayed by a CLI called: "byebug".

%p This CLI allows me to interact with Rails software while the software is running.

%p I operate byebug() by first asking it to stop at a specific line.

%p In the output above we can see that byebug() is stopped at line 8.

%p Once stopped, byebug() offers behavior similar to rails console.

%p My favorite byebug() commands are listed below:

%ul
  %li help       -- Helps you using byebug
  %li list       -- Lists lines of source code
  %li next       -- Runs one or more lines of code
  %li break      -- Sets breakpoints in the source code
  %li var        -- Shows variables and its values
  %li quit       -- Exits byebug
  %li step       -- Steps into blocks or methods one or more times
  %li continue   -- Runs until program ends, hits a breakpoint or reaches a line
  %li delete     -- Deletes breakpoints
  %li method     -- Shows methods of an object, class or module

  
%p I interacted with byebug() and captured that interaction session below:

.syntax
  %pre.sbar999
    =render 'lesson022bb1'

%h2#hw Homework

%ul
  %li Which lessons does Lesson 022 depend upon?
  %li How do I list all routes in my Rails app?
  %li What is a route?
  %li Which pieces of information describe a route?
  %li In a route what is a prefix?
  %li In a route what is a verb?
  %li In a route what is a URI?
  %li In a route what is a Pattern?
  %li In a route what is a Controller#action?
  %li Where can I find examples of Rails-routes in action?
  %li How to ask a user to send a POST-request to my Rails app?
  %li Why is GET the most frequently used verb?
  %li Which attribute in an anchor-element can be used to attach a DELETE verb to a request?
  %li In Rails, where have we seen the destroy() method?
  %li What does the destroy() method destroy?
  %li In Rails when does a controller object get created from controller class?
  %li As a developer what can I use the controller class for?
  %li What is the relationship between controller files and template files?
  %li Why is byebug() useful?
  %li Use byebug() to study all methods inside PetsController.
  %li Use byebug() to study all methods inside OwnersController.
  %li How to use byebug() to study ~ron/petz1/app/views/pets/index.html.erb ?

%hr/

%a(href='/lessons/lesson021') Lesson021
