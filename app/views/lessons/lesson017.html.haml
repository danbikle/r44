%h1 Lesson 017 [ Postgres Intro. ]

%p To do this lesson, you should login to the account you created in lesson002.

%h2 sam

%p I did this lesson and I started by issuing shell commands to create a user named "sam".

.syntax
  %pre
    %code
      sudo apt update
      sudo apt upgrade
      sudo apt install openssh-server
      sudo useradd -m -s /bin/bash -G sudo sam
      sudo passwd sam

%p Next, I used ssh to log into the sam account:

.syntax
  %pre
    %code
      ssh sam@localhost
      whoami

%p Then, I enhanced the sam account using files from lesson016:

.syntax
  %pre
    %code /usr/bin/curl -L rails4.us/sue/.bashrc > ~/.bashrc
    %code /usr/bin/curl -L rails4.us/sue/.emacs  > ~/.emacs

%h2 postgresql AKA "Postgres"

%p Next, I installed Postgres:

.syntax
  %pre
    %code sudo apt install postgresql postgresql-server-dev-all libpq-dev

%p Then, I started a Bash shell in the postgres Linux account:

.syntax
  %pre
    %code sudo su - postgres

%h2 psql

%p Next, I connected to the postgres server with the psql-CLI:

.syntax
  %pre
    %code psql -aP pager=no

%p The server responded with a prompt.

%p I typed "help" and saw this:

.syntax
  %pre
    =render 'lesson017pghelp'

%p After I studied help, I quit the psql-CLI.

%p Next, I verified that I was still inside the postgres Linux account:

.syntax
  %pre
    %code whoami

%p Then, I reconnected to the psql-CLI:

.syntax
  %pre
    %code psql -aP pager=no

%h2 CREATE ROLE, CREATE DATABASE

I created a role (and database) inside postgres for "sam":

.syntax
  %pre
    %code CREATE ROLE sam WITH login superuser password 'santasam';
    %code CREATE DATABASE sam;

%p Next, I exited the psql-CLI.
%p That returned me to the shell of the postgres linux account.

%p I checked with a shell command:

.syntax
  %pre
    %code whoami

%p Then, I exited the postgres linux account.

%p I verified I was in the sam linux account:

.syntax
  %pre
    %code whoami

%p I connected to the Postgres server using the sam linux account:

.syntax
  %pre
    %code psql -aP pager=no

%h2 pete

%p In psql, I issued a command to create a postgres account named "pete":

.syntax
  %pre
    %code CREATE ROLE pete WITH login superuser password 'cats1dogs2'; 

%p I issued a command to create a postgres database named "pete":

.syntax
  %pre
    %code CREATE DATABASE pete;

%p I exited psql.

%p I logged into postgres as pete:

.syntax
  %pre
    %code psql -h localhost -U pete -aP pager=no

%p I used pete to create a table:

.syntax
  %pre
    %code CREATE TABLE tab1 (col1 integer, col2 varchar, col3 date);

%p Pete created a row:

.syntax
  %pre
    %code INSERT INTO tab1 VALUES(11, 'Pete says hi', '1-1-2019');

%p Pete listed the row:

.syntax
  %pre
    %code SELECT * FROM tab1;
    
%p Pete did date arithmetic:

.syntax
  %pre
    %code SELECT col3+1 FROM tab1;

%h2 schema

%p In Postgres I have a way to group tables.

%p I create an object called a schema.

%p Then I can place a table in a schema.

%p The default schema is called "public".

%p A schema is like an Asian family name.

%p There, a full name might be like this: Bikle Dan

%p In Europe the full name has family name at the end: Dan Bikle

%p In Postgres the full name of a table is like this: schema1.table3
 
%p In psql, I used pete to create a schema:

.syntax
  %pre
    %code CREATE SCHEMA schema1;
    
%p Pete created a table in schema1:

.syntax
  %pre
    %code
      CREATE TABLE schema1.tab2 (col1 integer, col2 varchar, col3 date);

%p Pete created a row:

.syntax
  %pre
    %code INSERT INTO schema1.tab2 VALUES(22, 'Pete! says hi!', '1-1-2020');

%p Pete listed the row:

.syntax
  %pre
    %code SELECT * FROM schema1.tab2;

%p Pete used the "public" schema to list tab1:

.syntax
  %pre
    %code SELECT * FROM public.tab1;

%p I memorized the fact that if I create a table and do not name its schema, the table will then belong to the public schema.

%h2 db1 database

%p In psql, Pete created a database named db1:

.syntax
  %pre
    %code CREATE DATABASE db1;

%p Pete connected to db1:

.syntax
  %pre
    %code \connect db1

%p Pete created a table inside db1:

.syntax
  %pre
    %code CREATE TABLE tab3 (col1 integer, col2 varchar, col3 date);

%p Pete created a row:

.syntax
  %pre
    %code INSERT INTO tab3 VALUES(300, 'Pete. 123', '2-28-2022');

%p Pete listed the row:

.syntax
  %pre
    %code
      SELECT * FROM tab3;
      SELECT * FROM public.tab3;

%p Pete tried to list tab1 and tab2:

.syntax
  %pre
    %code
      SELECT * FROM public.tab1;
      SELECT * FROM schema1.tab2;

%p Pete connected to the pete database:

.syntax
  %pre
    %code \connect pete

%p Now, Pete should be connected to the pete database.

%p Pete tried to list tab1, tab2, and tab3:

.syntax
  %pre
    %code
      SELECT * FROM public.tab1;
      SELECT * FROM schema1.tab2;
      SELECT * FROM        tab3;
      SELECT * FROM public.tab3;

%p Pete should only see tab1 and tab2 because psql prevents sharing of data between databases.

%p tab1 and tab2 are in the pete database; tab3 is in the db1 database.

%p If I need to share data between two databases I could use a Rails-script to create two simultaneous connections.

%p Then, I can use the script as a data connection between databases.

%p This, however, is a Rails topic and I will cover it in a future lesson but not now.

%h2 ROLE

%p Above, you will find syntax we used to create roles.

%p Try to find those statements.

%p I display both creation statements below:

.syntax
  %pre
    %code
      CREATE ROLE sam  WITH login superuser password 'santasam';
      CREATE ROLE pete WITH login superuser password 'cats1dogs2';

%p It is tempting to think that a Role is like a Linux account because often they both are named after a person.

%p Both a Role and a Linux account allow me to connect to a resource using a name and a password.

%p From that perspective, a Role and a Linux account are similar.

%p A Role, however owns nothing.

%p A Linux account can own these objects: Folder, File, and Process.

%p So, if the pete-role owns nothing and it creates a table named tab1, what owns tab1?

%p In the examples above we see that tab1 is owned by a database and that database is called: "pete".

%p In Postgres, many people follow the habit of creating both a Role and a Database with the same name.

%p The Postgres software encourages this because when I connect to a Role with the psql shell command, then the software will try to connect me to a database with the same name.

%p Another habit you will see is that many people give the same name to a Linux account, a Database, and a Role.

%p We saw that above, when I created the sam Linux account, the sam Database, and the sam Role.

%p This is convenient because after I login to the sam Linux account, the psql shell command will allow me to connect to the sam Database, and the sam Role with a very short shell command: "psql".

%p I tried that idea and I captured this output:

.syntax
  %pre
    =render 'lesson017sam1'

%h2 Heroku

%p
  In
  %a(href='/lessons/lesson013') Lesson 013
  we studied Heroku.

%p Later, I learned that I can run psql on my laptop and connect to Postgres on Heroku and interact with tables there.

%p I will share the details now.

%p I started by creating an account at heroku.com:
%p
  %a(href='https://signup.heroku.com/') signup.heroku.com

%p Next, I used whoami to verify that I was still logged into the sam-Linux account:

.syntax
  %pre
    %code whoami
    
%p Then, I installed the heroku-CLI using Bash:

.syntax
  %pre
    =render 'lesson017hero1'

%p I used the heroku-CLI to login to heroku.com:

.syntax
  %pre
    %code heroku auth:login

%p Next, I created an empty app there:

.syntax
  %pre
    %code heroku create psql88

%p Then, I created a Postgres database there:

.syntax
  %pre
    %code heroku addons:create heroku-postgresql --app psql88

%p Next, I asked Heroku to list the database configuration:

.syntax
  %pre
    %code heroku config --app psql88

%p Then, Heroku showed me this:

.syntax
  %pre.sbar999
    =render 'lesson017hero2'

%p I studied that output and used common sense to select connection parameters:

%ul
  %li role aka user: fjwigftrgpnjad
  %li password: 2f6990f70f275f932ccaa49d7f63208e13da5bf310d14415a941a8a39c03c994
  %li host: ec2-54-83-50-174.compute-1.amazonaws.com
  %li database: dbvn99ml7a9jvh

%p Next, I wrote a connect script:

.syntax
  %pre.sbar999
    =render 'lesson017hero3'

%p Then, I ran the script and saw that it worked well:

.syntax
  %pre
    =render 'lesson017hero4'

%p Later, we will see that having access to Postgres on Heroku is a useful feature when we work with Rails.


%h1#hw Homework

%ul
  %li How to install Postgres on Ubuntu 16.04?
  %li What is the name of the postgres Linux account?
  %li How to connect to it?
  %li Why connect to it?
  %li What is psql?
  %li What is psql -aP pager=no ?
  %li Why is whoami Linux command useful when working with Postgres?
  %li What is a Role?
  %li What is a Database?
  %li What is a Table?
  %li What is a Schema?
  %li What shell command will connect dave-role to db4-database?
  %li What psql  command will connect dave-role to db4-database?
  %li How to arrange things so dave-role connects to dave-database with no password?
  %li Which is the default schema?
  %li Can Postgres have several schemas all with the same name?
  %li How to get a list of Roles?
  %li How to get a list of Databases?
  %li How to get a list of Tables?
  %li How to get a list of Schemas?
  %li How to create an app on Heroku?  
  %li How to get a Postgres database for that app?
  %li How to see the connection parameters of that database?
  %li How to use those parameters to connect a local copy of psql to that database?
  
  %li Study this cheat-sheet and declare which parts are useful:
  %li
    %a(href='https://gist.github.com/danbikle/90227067814c40114eecbd368f91d1b4' target='x')
      https://gist.github.com/danbikle/90227067814c40114eecbd368f91d1b4
      
  %li Study this cheat-sheet and declare which parts are useful:
  %li
    %a(href='/lesson017/PostgreSQL-Cheat-Sheet.pdf' target='p') PostgreSQL-Cheat-Sheet.pdf

  %li Study this cheat-sheet and declare which parts are useful:
  %li
    %a(href='https://gist.github.com/danbikle/3835f275b17ffa915e24572720debbce' target='x')
      https://gist.github.com/danbikle/3835f275b17ffa915e24572720debbce
  
  %li Study this page and declare which parts are useful:
  %li
    %a(href='https://www.postgresql.org/docs/9.5/app-psql.html' target='x')
      https://www.postgresql.org/docs/9.5/app-psql.html

%hr/

%a(href='/lessons/lesson016') Lesson016
|
%a(href='/lessons/lesson018') Lesson018

